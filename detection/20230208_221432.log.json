{"env_info": "sys.platform: linux\nPython: 3.10.4 (main, Mar 31 2022, 08:41:55) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060 Laptop GPU\nCUDA_HOME: /usr/local/cuda-11.3\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.6.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/train.json',\n        img_prefix='data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'], interval=1, save_best='segm_mAP')\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = None\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=20)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = './mask_rcnn_r50_fpn_fp16_1x_coco.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nfp16 = dict(loss_scale=512.0)\nwork_dir = './work_dirs/mask_rcnn_r50_fpn_fp16_1x_balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1290025102, "exp_name": "mask_rcnn_r50_fpn_fp16_1x_balloon.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.002, "memory": 2367, "data_time": 0.23903, "loss_rpn_cls": 0.05318, "loss_rpn_bbox": 0.01494, "loss_cls": 0.37186, "acc": 87.54883, "loss_bbox": 0.27489, "loss_mask": 3.06812, "loss": 3.78299, "time": 0.8475}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.002, "memory": 2397, "data_time": 0.01373, "loss_rpn_cls": 0.04352, "loss_rpn_bbox": 0.01952, "loss_cls": 0.26121, "acc": 91.83594, "loss_bbox": 0.28848, "loss_mask": 0.43567, "loss": 1.0484, "time": 0.36717}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.002, "memory": 2621, "data_time": 0.02877, "loss_rpn_cls": 0.10059, "loss_rpn_bbox": 0.03517, "loss_cls": 0.2457, "acc": 90.38086, "loss_bbox": 0.33149, "loss_mask": 0.34886, "loss": 1.06181, "time": 0.38391}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.002, "bbox_mAP": 0.3302, "bbox_mAP_50": 0.5249, "bbox_mAP_75": 0.406, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.1165, "bbox_mAP_l": 0.4745, "bbox_mAP_copypaste": "0.3302 0.5249 0.4060 0.1010 0.1165 0.4745", "segm_mAP": 0.3776, "segm_mAP_50": 0.5362, "segm_mAP_75": 0.4437, "segm_mAP_s": 0.0112, "segm_mAP_m": 0.0729, "segm_mAP_l": 0.5742, "segm_mAP_copypaste": "0.3776 0.5362 0.4437 0.0112 0.0729 0.5742"}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24296, "loss_rpn_cls": 0.03688, "loss_rpn_bbox": 0.02702, "loss_cls": 0.21198, "acc": 90.45898, "loss_bbox": 0.33702, "loss_mask": 0.22916, "loss": 0.84206, "time": 0.62469}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01151, "loss_rpn_cls": 0.01905, "loss_rpn_bbox": 0.01325, "loss_cls": 0.1505, "acc": 94.14062, "loss_bbox": 0.30585, "loss_mask": 0.21981, "loss": 0.70844, "time": 0.35142}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01097, "loss_rpn_cls": 0.01806, "loss_rpn_bbox": 0.0132, "loss_cls": 0.12676, "acc": 95.51758, "loss_bbox": 0.26832, "loss_mask": 0.15326, "loss": 0.57961, "time": 0.34945}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.002, "bbox_mAP": 0.5205, "bbox_mAP_50": 0.689, "bbox_mAP_75": 0.5976, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.2599, "bbox_mAP_l": 0.6871, "bbox_mAP_copypaste": "0.5205 0.6890 0.5976 0.2020 0.2599 0.6871", "segm_mAP": 0.5766, "segm_mAP_50": 0.689, "segm_mAP_75": 0.6277, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.2099, "segm_mAP_l": 0.7744, "segm_mAP_copypaste": "0.5766 0.6890 0.6277 0.0673 0.2099 0.7744"}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.22902, "loss_rpn_cls": 0.00869, "loss_rpn_bbox": 0.00994, "loss_cls": 0.10804, "acc": 95.83008, "loss_bbox": 0.17541, "loss_mask": 0.16351, "loss": 0.46561, "time": 0.58134}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01703, "loss_rpn_cls": 0.02119, "loss_rpn_bbox": 0.01962, "loss_cls": 0.14743, "acc": 94.66797, "loss_bbox": 0.18283, "loss_mask": 0.19004, "loss": 0.56111, "time": 0.36075}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01633, "loss_rpn_cls": 0.0204, "loss_rpn_bbox": 0.01797, "loss_cls": 0.1431, "acc": 94.67773, "loss_bbox": 0.16217, "loss_mask": 0.15198, "loss": 0.49561, "time": 0.3557}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.002, "bbox_mAP": 0.5602, "bbox_mAP_50": 0.6825, "bbox_mAP_75": 0.6025, "bbox_mAP_s": 0.2007, "bbox_mAP_m": 0.2484, "bbox_mAP_l": 0.7616, "bbox_mAP_copypaste": "0.5602 0.6825 0.6025 0.2007 0.2484 0.7616", "segm_mAP": 0.5983, "segm_mAP_50": 0.6796, "segm_mAP_75": 0.6553, "segm_mAP_s": 0.0446, "segm_mAP_m": 0.2293, "segm_mAP_l": 0.8154, "segm_mAP_copypaste": "0.5983 0.6796 0.6553 0.0446 0.2293 0.8154"}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24129, "loss_rpn_cls": 0.02014, "loss_rpn_bbox": 0.01246, "loss_cls": 0.1551, "acc": 94.15039, "loss_bbox": 0.13063, "loss_mask": 0.1788, "loss": 0.49713, "time": 0.61256}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01688, "loss_rpn_cls": 0.00844, "loss_rpn_bbox": 0.01724, "loss_cls": 0.12367, "acc": 95.44922, "loss_bbox": 0.12121, "loss_mask": 0.12505, "loss": 0.39561, "time": 0.35971}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01602, "loss_rpn_cls": 0.01889, "loss_rpn_bbox": 0.01902, "loss_cls": 0.10963, "acc": 95.86914, "loss_bbox": 0.12394, "loss_mask": 0.12429, "loss": 0.39576, "time": 0.35322}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6106, "bbox_mAP_50": 0.7434, "bbox_mAP_75": 0.698, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4208, "bbox_mAP_l": 0.7673, "bbox_mAP_copypaste": "0.6106 0.7434 0.6980 0.0000 0.4208 0.7673", "segm_mAP": 0.6519, "segm_mAP_50": 0.7376, "segm_mAP_75": 0.705, "segm_mAP_s": 0.0, "segm_mAP_m": 0.363, "segm_mAP_l": 0.8387, "segm_mAP_copypaste": "0.6519 0.7376 0.7050 0.0000 0.3630 0.8387"}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24401, "loss_rpn_cls": 0.00845, "loss_rpn_bbox": 0.01396, "loss_cls": 0.08686, "acc": 96.82617, "loss_bbox": 0.11011, "loss_mask": 0.12679, "loss": 0.34616, "time": 0.60262}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01573, "loss_rpn_cls": 0.01075, "loss_rpn_bbox": 0.02002, "loss_cls": 0.10523, "acc": 95.64453, "loss_bbox": 0.10113, "loss_mask": 0.1111, "loss": 0.34822, "time": 0.35774}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01174, "loss_rpn_cls": 0.00863, "loss_rpn_bbox": 0.01457, "loss_cls": 0.09089, "acc": 96.64062, "loss_bbox": 0.1095, "loss_mask": 0.13588, "loss": 0.35946, "time": 0.33802}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6566, "bbox_mAP_50": 0.7911, "bbox_mAP_75": 0.7715, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5546, "bbox_mAP_l": 0.7925, "bbox_mAP_copypaste": "0.6566 0.7911 0.7715 0.0000 0.5546 0.7925", "segm_mAP": 0.7067, "segm_mAP_50": 0.7911, "segm_mAP_75": 0.7711, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5431, "segm_mAP_l": 0.8744, "segm_mAP_copypaste": "0.7067 0.7911 0.7711 0.0000 0.5431 0.8744"}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.23768, "loss_rpn_cls": 0.00433, "loss_rpn_bbox": 0.00918, "loss_cls": 0.067, "acc": 97.30469, "loss_bbox": 0.08585, "loss_mask": 0.12489, "loss": 0.29124, "time": 0.58897}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01794, "loss_rpn_cls": 0.01061, "loss_rpn_bbox": 0.01733, "loss_cls": 0.10905, "acc": 95.53711, "loss_bbox": 0.12484, "loss_mask": 0.12159, "loss": 0.38343, "time": 0.35615}
{"mode": "train", "epoch": 6, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01128, "loss_rpn_cls": 0.00387, "loss_rpn_bbox": 0.00869, "loss_cls": 0.06169, "acc": 97.72461, "loss_bbox": 0.07682, "loss_mask": 0.1119, "loss": 0.26297, "time": 0.33691}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6891, "bbox_mAP_50": 0.8254, "bbox_mAP_75": 0.8254, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5807, "bbox_mAP_l": 0.8108, "bbox_mAP_copypaste": "0.6891 0.8254 0.8254 0.0000 0.5807 0.8108", "segm_mAP": 0.7383, "segm_mAP_50": 0.8254, "segm_mAP_75": 0.7989, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5678, "segm_mAP_l": 0.8854, "segm_mAP_copypaste": "0.7383 0.8254 0.7989 0.0000 0.5678 0.8854"}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24065, "loss_rpn_cls": 0.00508, "loss_rpn_bbox": 0.00714, "loss_cls": 0.06423, "acc": 97.43164, "loss_bbox": 0.08151, "loss_mask": 0.11483, "loss": 0.27278, "time": 0.59066}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.02209, "loss_rpn_cls": 0.00522, "loss_rpn_bbox": 0.01508, "loss_cls": 0.08911, "acc": 96.41602, "loss_bbox": 0.10906, "loss_mask": 0.1161, "loss": 0.33458, "time": 0.36374}
{"mode": "train", "epoch": 7, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01526, "loss_rpn_cls": 0.00534, "loss_rpn_bbox": 0.01075, "loss_cls": 0.07299, "acc": 97.28516, "loss_bbox": 0.08761, "loss_mask": 0.10247, "loss": 0.27916, "time": 0.35845}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6521, "bbox_mAP_50": 0.7708, "bbox_mAP_75": 0.7708, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4919, "bbox_mAP_l": 0.8049, "bbox_mAP_copypaste": "0.6521 0.7708 0.7708 0.0000 0.4919 0.8049", "segm_mAP": 0.7025, "segm_mAP_50": 0.7708, "segm_mAP_75": 0.7708, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5029, "segm_mAP_l": 0.8772, "segm_mAP_copypaste": "0.7025 0.7708 0.7708 0.0000 0.5029 0.8772"}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24002, "loss_rpn_cls": 0.00375, "loss_rpn_bbox": 0.01488, "loss_cls": 0.08485, "acc": 96.66016, "loss_bbox": 0.10358, "loss_mask": 0.10905, "loss": 0.31612, "time": 0.58979}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01165, "loss_rpn_cls": 0.00413, "loss_rpn_bbox": 0.01131, "loss_cls": 0.07414, "acc": 97.06055, "loss_bbox": 0.09369, "loss_mask": 0.11087, "loss": 0.29413, "time": 0.3448}
{"mode": "train", "epoch": 8, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.00981, "loss_rpn_cls": 0.00267, "loss_rpn_bbox": 0.00643, "loss_cls": 0.04444, "acc": 98.29102, "loss_bbox": 0.05904, "loss_mask": 0.08784, "loss": 0.20041, "time": 0.33246}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6885, "bbox_mAP_50": 0.8317, "bbox_mAP_75": 0.8127, "bbox_mAP_s": 0.0673, "bbox_mAP_m": 0.5721, "bbox_mAP_l": 0.8149, "bbox_mAP_copypaste": "0.6885 0.8317 0.8127 0.0673 0.5721 0.8149", "segm_mAP": 0.7153, "segm_mAP_50": 0.8317, "segm_mAP_75": 0.7627, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.5173, "segm_mAP_l": 0.8782, "segm_mAP_copypaste": "0.7153 0.8317 0.7627 0.0337 0.5173 0.8782"}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.23215, "loss_rpn_cls": 0.00574, "loss_rpn_bbox": 0.01126, "loss_cls": 0.06475, "acc": 97.53906, "loss_bbox": 0.08544, "loss_mask": 0.09243, "loss": 0.25961, "time": 0.58411}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01437, "loss_rpn_cls": 0.0032, "loss_rpn_bbox": 0.01195, "loss_cls": 0.0723, "acc": 97.10938, "loss_bbox": 0.1074, "loss_mask": 0.11498, "loss": 0.30984, "time": 0.35034}
{"mode": "train", "epoch": 9, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.00993, "loss_rpn_cls": 0.00179, "loss_rpn_bbox": 0.0061, "loss_cls": 0.04804, "acc": 98.08594, "loss_bbox": 0.06623, "loss_mask": 0.06954, "loss": 0.19171, "time": 0.32406}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6931, "bbox_mAP_50": 0.8183, "bbox_mAP_75": 0.7969, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5844, "bbox_mAP_l": 0.8178, "bbox_mAP_copypaste": "0.6931 0.8183 0.7969 0.0000 0.5844 0.8178", "segm_mAP": 0.7282, "segm_mAP_50": 0.8196, "segm_mAP_75": 0.8011, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.5389, "segm_mAP_l": 0.8854, "segm_mAP_copypaste": "0.7282 0.8196 0.8011 0.0337 0.5389 0.8854"}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.23014, "loss_rpn_cls": 0.00134, "loss_rpn_bbox": 0.00431, "loss_cls": 0.03585, "acc": 98.61328, "loss_bbox": 0.05131, "loss_mask": 0.08851, "loss": 0.18132, "time": 0.58681}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01268, "loss_rpn_cls": 0.00393, "loss_rpn_bbox": 0.00962, "loss_cls": 0.05392, "acc": 97.75391, "loss_bbox": 0.08132, "loss_mask": 0.09326, "loss": 0.24205, "time": 0.35173}
{"mode": "train", "epoch": 10, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01524, "loss_rpn_cls": 0.00403, "loss_rpn_bbox": 0.01145, "loss_cls": 0.06162, "acc": 97.62695, "loss_bbox": 0.09951, "loss_mask": 0.08309, "loss": 0.25971, "time": 0.34327}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.002, "bbox_mAP": 0.7157, "bbox_mAP_50": 0.8524, "bbox_mAP_75": 0.796, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.5862, "bbox_mAP_l": 0.8414, "bbox_mAP_copypaste": "0.7157 0.8524 0.7960 0.1010 0.5862 0.8414", "segm_mAP": 0.7389, "segm_mAP_50": 0.8361, "segm_mAP_75": 0.801, "segm_mAP_s": 0.1347, "segm_mAP_m": 0.5572, "segm_mAP_l": 0.8817, "segm_mAP_copypaste": "0.7389 0.8361 0.8010 0.1347 0.5572 0.8817"}
{"mode": "train", "epoch": 11, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.23978, "loss_rpn_cls": 0.00161, "loss_rpn_bbox": 0.00969, "loss_cls": 0.04515, "acc": 98.41797, "loss_bbox": 0.07482, "loss_mask": 0.07828, "loss": 0.20956, "time": 0.60122}
{"mode": "train", "epoch": 11, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01218, "loss_rpn_cls": 0.00319, "loss_rpn_bbox": 0.01074, "loss_cls": 0.05727, "acc": 97.72461, "loss_bbox": 0.08241, "loss_mask": 0.08946, "loss": 0.24308, "time": 0.34218}
{"mode": "train", "epoch": 11, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01022, "loss_rpn_cls": 0.00136, "loss_rpn_bbox": 0.00491, "loss_cls": 0.04656, "acc": 98.21289, "loss_bbox": 0.06227, "loss_mask": 0.0861, "loss": 0.2012, "time": 0.33802}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.002, "bbox_mAP": 0.7069, "bbox_mAP_50": 0.8219, "bbox_mAP_75": 0.8053, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5614, "bbox_mAP_l": 0.844, "bbox_mAP_copypaste": "0.7069 0.8219 0.8053 0.0000 0.5614 0.8440", "segm_mAP": 0.7293, "segm_mAP_50": 0.8235, "segm_mAP_75": 0.7917, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.5321, "segm_mAP_l": 0.8866, "segm_mAP_copypaste": "0.7293 0.8235 0.7917 0.0337 0.5321 0.8866"}
{"mode": "train", "epoch": 12, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.23684, "loss_rpn_cls": 0.00287, "loss_rpn_bbox": 0.00558, "loss_cls": 0.04751, "acc": 98.14453, "loss_bbox": 0.07403, "loss_mask": 0.07797, "loss": 0.20796, "time": 0.58924}
{"mode": "train", "epoch": 12, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01647, "loss_rpn_cls": 0.00232, "loss_rpn_bbox": 0.00915, "loss_cls": 0.04421, "acc": 98.4082, "loss_bbox": 0.06587, "loss_mask": 0.0757, "loss": 0.19726, "time": 0.35647}
{"mode": "train", "epoch": 12, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01272, "loss_rpn_cls": 0.00179, "loss_rpn_bbox": 0.00909, "loss_cls": 0.04375, "acc": 98.28125, "loss_bbox": 0.08144, "loss_mask": 0.06628, "loss": 0.20236, "time": 0.33992}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6539, "bbox_mAP_50": 0.8061, "bbox_mAP_75": 0.752, "bbox_mAP_s": 0.0337, "bbox_mAP_m": 0.5141, "bbox_mAP_l": 0.8, "bbox_mAP_copypaste": "0.6539 0.8061 0.7520 0.0337 0.5141 0.8000", "segm_mAP": 0.6811, "segm_mAP_50": 0.7649, "segm_mAP_75": 0.7649, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4902, "segm_mAP_l": 0.8541, "segm_mAP_copypaste": "0.6811 0.7649 0.7649 0.0000 0.4902 0.8541"}
{"mode": "train", "epoch": 13, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.23292, "loss_rpn_cls": 0.00181, "loss_rpn_bbox": 0.00897, "loss_cls": 0.04681, "acc": 98.23242, "loss_bbox": 0.08006, "loss_mask": 0.08088, "loss": 0.21854, "time": 0.58084}
{"mode": "train", "epoch": 13, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.012, "loss_rpn_cls": 0.0016, "loss_rpn_bbox": 0.00662, "loss_cls": 0.03978, "acc": 98.47656, "loss_bbox": 0.0777, "loss_mask": 0.08305, "loss": 0.20876, "time": 0.35307}
{"mode": "train", "epoch": 13, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01064, "loss_rpn_cls": 0.00141, "loss_rpn_bbox": 0.00734, "loss_cls": 0.04099, "acc": 98.45703, "loss_bbox": 0.06305, "loss_mask": 0.07542, "loss": 0.18821, "time": 0.33794}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6992, "bbox_mAP_50": 0.809, "bbox_mAP_75": 0.7917, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5445, "bbox_mAP_l": 0.8449, "bbox_mAP_copypaste": "0.6992 0.8090 0.7917 0.0000 0.5445 0.8449", "segm_mAP": 0.7189, "segm_mAP_50": 0.7917, "segm_mAP_75": 0.7917, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5224, "segm_mAP_l": 0.8827, "segm_mAP_copypaste": "0.7189 0.7917 0.7917 0.0000 0.5224 0.8827"}
{"mode": "train", "epoch": 14, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24242, "loss_rpn_cls": 0.00108, "loss_rpn_bbox": 0.00788, "loss_cls": 0.04233, "acc": 98.30078, "loss_bbox": 0.06961, "loss_mask": 0.0779, "loss": 0.1988, "time": 0.59477}
{"mode": "train", "epoch": 14, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01583, "loss_rpn_cls": 0.00181, "loss_rpn_bbox": 0.01015, "loss_cls": 0.04578, "acc": 98.07617, "loss_bbox": 0.06355, "loss_mask": 0.08121, "loss": 0.2025, "time": 0.34558}
{"mode": "train", "epoch": 14, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01108, "loss_rpn_cls": 0.00085, "loss_rpn_bbox": 0.00581, "loss_cls": 0.04052, "acc": 98.4375, "loss_bbox": 0.06606, "loss_mask": 0.07628, "loss": 0.18951, "time": 0.34072}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6844, "bbox_mAP_50": 0.8123, "bbox_mAP_75": 0.7731, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5671, "bbox_mAP_l": 0.8135, "bbox_mAP_copypaste": "0.6844 0.8123 0.7731 0.0000 0.5671 0.8135", "segm_mAP": 0.7138, "segm_mAP_50": 0.8145, "segm_mAP_75": 0.7953, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.5099, "segm_mAP_l": 0.8725, "segm_mAP_copypaste": "0.7138 0.8145 0.7953 0.0337 0.5099 0.8725"}
{"mode": "train", "epoch": 15, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24817, "loss_rpn_cls": 0.00148, "loss_rpn_bbox": 0.00852, "loss_cls": 0.04105, "acc": 98.37891, "loss_bbox": 0.06282, "loss_mask": 0.07999, "loss": 0.19386, "time": 0.58531}
{"mode": "train", "epoch": 15, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01226, "loss_rpn_cls": 0.00108, "loss_rpn_bbox": 0.00821, "loss_cls": 0.05287, "acc": 98.02734, "loss_bbox": 0.08067, "loss_mask": 0.0806, "loss": 0.22344, "time": 0.36666}
{"mode": "train", "epoch": 15, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01135, "loss_rpn_cls": 0.00139, "loss_rpn_bbox": 0.00683, "loss_cls": 0.03647, "acc": 98.59375, "loss_bbox": 0.05471, "loss_mask": 0.0598, "loss": 0.15919, "time": 0.34255}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.002, "bbox_mAP": 0.7003, "bbox_mAP_50": 0.8066, "bbox_mAP_75": 0.8066, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5808, "bbox_mAP_l": 0.8418, "bbox_mAP_copypaste": "0.7003 0.8066 0.8066 0.0000 0.5808 0.8418", "segm_mAP": 0.725, "segm_mAP_50": 0.8237, "segm_mAP_75": 0.7879, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.535, "segm_mAP_l": 0.888, "segm_mAP_copypaste": "0.7250 0.8237 0.7879 0.0337 0.5350 0.8880"}
{"mode": "train", "epoch": 16, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.23873, "loss_rpn_cls": 0.00134, "loss_rpn_bbox": 0.01186, "loss_cls": 0.05147, "acc": 98.13477, "loss_bbox": 0.07689, "loss_mask": 0.08689, "loss": 0.22845, "time": 0.60186}
{"mode": "train", "epoch": 16, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01027, "loss_rpn_cls": 0.00107, "loss_rpn_bbox": 0.00518, "loss_cls": 0.03978, "acc": 98.4082, "loss_bbox": 0.06434, "loss_mask": 0.06437, "loss": 0.17475, "time": 0.33777}
{"mode": "train", "epoch": 16, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.0091, "loss_rpn_cls": 0.00141, "loss_rpn_bbox": 0.0053, "loss_cls": 0.0267, "acc": 98.94531, "loss_bbox": 0.04326, "loss_mask": 0.0573, "loss": 0.13397, "time": 0.32891}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6959, "bbox_mAP_50": 0.8279, "bbox_mAP_75": 0.7911, "bbox_mAP_s": 0.0337, "bbox_mAP_m": 0.5553, "bbox_mAP_l": 0.8319, "bbox_mAP_copypaste": "0.6959 0.8279 0.7911 0.0337 0.5553 0.8319", "segm_mAP": 0.7233, "segm_mAP_50": 0.7894, "segm_mAP_75": 0.7894, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5327, "segm_mAP_l": 0.8867, "segm_mAP_copypaste": "0.7233 0.7894 0.7894 0.0000 0.5327 0.8867"}
{"mode": "train", "epoch": 17, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24719, "loss_rpn_cls": 0.00135, "loss_rpn_bbox": 0.00951, "loss_cls": 0.0475, "acc": 98.14453, "loss_bbox": 0.07929, "loss_mask": 0.08595, "loss": 0.2236, "time": 0.61769}
{"mode": "train", "epoch": 17, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01084, "loss_rpn_cls": 0.00102, "loss_rpn_bbox": 0.00678, "loss_cls": 0.03226, "acc": 98.7793, "loss_bbox": 0.04764, "loss_mask": 0.06023, "loss": 0.14793, "time": 0.34427}
{"mode": "train", "epoch": 17, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01233, "loss_rpn_cls": 0.00097, "loss_rpn_bbox": 0.00734, "loss_cls": 0.04012, "acc": 98.39844, "loss_bbox": 0.06308, "loss_mask": 0.06755, "loss": 0.17906, "time": 0.34824}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6896, "bbox_mAP_50": 0.8077, "bbox_mAP_75": 0.7892, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.558, "bbox_mAP_l": 0.8285, "bbox_mAP_copypaste": "0.6896 0.8077 0.7892 0.0000 0.5580 0.8285", "segm_mAP": 0.7186, "segm_mAP_50": 0.7892, "segm_mAP_75": 0.7892, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5246, "segm_mAP_l": 0.8818, "segm_mAP_copypaste": "0.7186 0.7892 0.7892 0.0000 0.5246 0.8818"}
{"mode": "train", "epoch": 18, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.23607, "loss_rpn_cls": 0.00164, "loss_rpn_bbox": 0.01083, "loss_cls": 0.04046, "acc": 98.48633, "loss_bbox": 0.06484, "loss_mask": 0.08083, "loss": 0.19861, "time": 0.60205}
{"mode": "train", "epoch": 18, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01347, "loss_rpn_cls": 0.00134, "loss_rpn_bbox": 0.00829, "loss_cls": 0.044, "acc": 98.25195, "loss_bbox": 0.07166, "loss_mask": 0.07447, "loss": 0.19976, "time": 0.36172}
{"mode": "train", "epoch": 18, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.00998, "loss_rpn_cls": 0.00019, "loss_rpn_bbox": 0.00348, "loss_cls": 0.02301, "acc": 99.11133, "loss_bbox": 0.04006, "loss_mask": 0.05061, "loss": 0.11735, "time": 0.34131}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6837, "bbox_mAP_50": 0.803, "bbox_mAP_75": 0.7851, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5482, "bbox_mAP_l": 0.819, "bbox_mAP_copypaste": "0.6837 0.8030 0.7851 0.0000 0.5482 0.8190", "segm_mAP": 0.7128, "segm_mAP_50": 0.8046, "segm_mAP_75": 0.7845, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.516, "segm_mAP_l": 0.8727, "segm_mAP_copypaste": "0.7128 0.8046 0.7845 0.0337 0.5160 0.8727"}
{"mode": "train", "epoch": 19, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24036, "loss_rpn_cls": 0.00089, "loss_rpn_bbox": 0.00588, "loss_cls": 0.03154, "acc": 98.78906, "loss_bbox": 0.05314, "loss_mask": 0.06367, "loss": 0.15513, "time": 0.59777}
{"mode": "train", "epoch": 19, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01688, "loss_rpn_cls": 0.00119, "loss_rpn_bbox": 0.01017, "loss_cls": 0.04168, "acc": 98.49609, "loss_bbox": 0.06496, "loss_mask": 0.07241, "loss": 0.1904, "time": 0.3829}
{"mode": "train", "epoch": 19, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01333, "loss_rpn_cls": 0.00123, "loss_rpn_bbox": 0.00343, "loss_cls": 0.02726, "acc": 98.97461, "loss_bbox": 0.04677, "loss_mask": 0.05431, "loss": 0.133, "time": 0.3636}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.002, "bbox_mAP": 0.7024, "bbox_mAP_50": 0.8077, "bbox_mAP_75": 0.7892, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5675, "bbox_mAP_l": 0.8387, "bbox_mAP_copypaste": "0.7024 0.8077 0.7892 0.0000 0.5675 0.8387", "segm_mAP": 0.7145, "segm_mAP_50": 0.8087, "segm_mAP_75": 0.7899, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.5216, "segm_mAP_l": 0.8703, "segm_mAP_copypaste": "0.7145 0.8087 0.7899 0.0337 0.5216 0.8703"}
{"mode": "train", "epoch": 20, "iter": 10, "lr": 0.002, "memory": 2990, "data_time": 0.24964, "loss_rpn_cls": 0.00099, "loss_rpn_bbox": 0.00746, "loss_cls": 0.03592, "acc": 98.68164, "loss_bbox": 0.06092, "loss_mask": 0.06577, "loss": 0.17106, "time": 0.63151}
{"mode": "train", "epoch": 20, "iter": 20, "lr": 0.002, "memory": 2990, "data_time": 0.01256, "loss_rpn_cls": 0.00084, "loss_rpn_bbox": 0.00514, "loss_cls": 0.0327, "acc": 98.80859, "loss_bbox": 0.05078, "loss_mask": 0.06808, "loss": 0.15754, "time": 0.35309}
{"mode": "train", "epoch": 20, "iter": 30, "lr": 0.002, "memory": 2990, "data_time": 0.01423, "loss_rpn_cls": 0.00093, "loss_rpn_bbox": 0.00756, "loss_cls": 0.03328, "acc": 98.75, "loss_bbox": 0.05304, "loss_mask": 0.06642, "loss": 0.16123, "time": 0.36607}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.002, "bbox_mAP": 0.7112, "bbox_mAP_50": 0.8071, "bbox_mAP_75": 0.8071, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5633, "bbox_mAP_l": 0.8513, "bbox_mAP_copypaste": "0.7112 0.8071 0.8071 0.0000 0.5633 0.8513", "segm_mAP": 0.7231, "segm_mAP_50": 0.8107, "segm_mAP_75": 0.7913, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.5317, "segm_mAP_l": 0.8811, "segm_mAP_copypaste": "0.7231 0.8107 0.7913 0.0337 0.5317 0.8811"}
